#!/bin/bash
##   ____  _
##  / __ \| |
## | |  | | |_   _ _ __ ___  _ __   __ _
## | |  | | | | | | '_ ` _ \| '_ \ / _` |
## | |__| | | |_| | | | | | | |_) | (_| |
##  \____/|_|\__, |_| |_| |_| .__/ \__,_|
##			__/ |		 | |
##		   |___/		  |_|
##
## Script to handler Minecraft servers
## Author > Tristiisch

# PARAMETRE

# Commandes
START="start"
STOP="stop"
SEE="see"
BACKUP="backup"
RESTART="restart"
SSH="ssh"



# Format de la date 
DATE="$(date +"%a %d %b %Y %H:%M")"
DATE_DAY="$(date +"%j")"

# Dossier des serveurs (dossier qui contient les dossiers qui contiennent les fichiers du serveur). Il est recommand?e cr?un dossier dans /home tel que /home/<nom de votre network> pour y mettre tous les autres serveurs.
SERVEUR_DIR="/home/serveurs"

# Commande en cas d'erreur ou d'arguments non d?nie
USAGE="\e[0;36mUsage >\n$(basename "$0") $START|$STOP|$RESTART ALL|<server>\n$(basename "$0") $SEE <server> -t\n$(basename "$0") deploy|deployto|autodeploy dev|master ALL|<server>\n$(basename "$0") unban <ip>\e[0;36m\n$(basename "$0") $BACKUP\n$(basename "$0") backupbdd|backupserv\nTous les serveurs : $(ls $SERVEUR_DIR)\e[0m"

# Nom des script qui lance le serveur (qui lance le .jar). Par default start.sh
STARTSH="start.sh"

REPO_DIR="/home/repo"

VERSION="1.16.5"
VERSION_WATERFALL="1.16"

PAPER_API_VERSION="https://purpur.pl3x.net/api/v1/purpur/$VERSION/latest"
PAPER_API_DOWNLOAD="$PAPER_API_VERSION/download"
WATERFALL_API_VERSION="https://papermc.io/api/v1/waterfall/$VERSION_WATERFALL/latest"
WATERFALL_API_DOWNLOAD="$WATERFALL_API_VERSION/download"

# spigot_jenkins="https://papermc.io/ci/job/Paper-1.16"
spigot_file="paperclip.jar"
# bungee_jenkins="https://papermc.io/ci/job/Waterfall"
bungee_file="Waterfall.jar"

# Nom de l'utilisateur avec lequel les serveurs se lance. Par default root
USER_EXE="minecraft"

# Serveurs:
# ALL="$(ls $SERVEUR_DIR)"
ALL="bungee1 lobby1 zta1 creatif1"

# Backup mysql
BDD_USER="root"
BDD_PASSWORD="deMmeROCIR1iSGdng0RY_P_aleCQ5n3g12fSSe8iUry4_BmZcy"
BDD_HOST="localhost"

BACKUP_DIR="/home/.backup"

# FTP sauvegarde ################################
# IP (chiffr?u dns) du ftp
FTP_HOST=""
# Port du ftp (default 21)
FTP_PORT="21"
# Nom d'utiliser du compte ftp
FTP_USER=""
# Mdp du compte ftp
FTP_PASSWORD=""
# Dossier des backups sur le ftp
FTP_DIR="/serveurs/"

DEPLOYTO_SECOND_BEFORE_SHUTDOWN="10"

#- - - - - - - - - - - - - - - - - - - - - - - - - - UNBAN IP - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ "$1" = "unban" ]; then
	if [ -n "$2" ]; then
		route del "$2" reject
		fail2ban-client set sshd unbanip $2
		fail2ban-client set mysqld-auth unbanip $2
		sed -i '/$2/d' /etc/hosts.deny
	else
		echo -e "\e[35mUsage\e[0;35m $0 unban <ip>\e[0m"
	fi
	exit $?
fi

if [ $USER != $USER_EXE ]; then
	sudo -u $USER_EXE mc ${*:1}
	exit $?
fi

#- - - - - - - - - - - - - - - - - - - - - - - - - - IS OPEN - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ "$1" = "isopen" ]; then
	if [ -n "$2" ]; then
		#U=$(stat -c '%U' $SERVEUR_DIR/$2)
		if [ `ls /run/screen/S-$USER_EXE | grep -w $2 | wc -l` -eq "1" ]; then
		#if [ `sudo -u $USER_EXE ls /run/screen/S-$USER_EXE | grep -w $2 | wc -l` -eq "1" ]; then
			serv_ouvert+=" $element"
			echo "1"
		else
			echo "0"
		fi
	else
		echo "0"
	fi
#- - - - - - - - - - - - - - - - - - - - - - - - - - OPEN - - - - - - - - - - - - - - - - - - - - - - - - - -
elif [ "$1" = "open" ]; then
	for element in `ls $SERVEUR_DIR`
	do
		if [ `mc isopen $element` -eq "1" ]; then
			serv_ouvert+=" $element"
		else
			serv_fermer+=" $element"
		fi
	done
	if [ -n "$serv_ouvert" ]; then
		echo -e "\e[0;36mOUVERT > \e[36m$serv_ouvert\e[0m"
	fi
	if [ -n "$serv_fermer" ]; then
		echo -e "\e[0;31mFERMER > \e[31m$serv_fermer\e[0m"
	fi
#- - - - - - - - - - - - - - - - - - - - - - - - - - START - - - - - - - - - - - - - - - - - - - - - - - - - -
elif [ "$1" = "$START" ]; then
	if [ -n "$2" ]; then
		if [ "$2" = "all" ]; then
			SERV="$ALL"
		else
			SERV="${*:2}"
		fi
		for element in $SERV
		do
		if [ -d "$SERVEUR_DIR/$element" ]; then
			if [ `mc isopen $element` -eq "0" ]; then
				serv_lance+=" $element"
			else
				serv_ouvert+=" $element"
			fi
		else
			serv_dossier+=" $element"
		fi
		done
		if [ "$element" = "omega" ]; then
			bash -c "cd /home/omega; bash $STARTSH"
			echo -e "\e[32m$element\e[0;32m démarre\e[0m"
		else 
			if [ -n "$serv_dossier" ]; then
				echo -e "\e[31m$serv_dossier\e[0;31m n'existe pas (dossier $SERVEUR_DIR/nom du serveur)\e[0m"
			fi
			if [ -n "$serv_ouvert" ]; then
				echo -e "\e[36m$serv_ouvert\e[0;36m est déjà ouvert\e[0m"
			fi
			if [ -n "$serv_lance" ]; then
				for element in $serv_lance
				do
					bash -c "cd $SERVEUR_DIR/$element; bash $STARTSH"
				done
				echo -e "\e[32m$serv_lance\e[0;32m démarre\e[0m"
			fi
		fi
	else
		read -p 'Quel(s) serveur(s) ? ' server_select
		$0 $START $server_select
	fi
#- - - - - - - - - - - - - - - - - - - - - - - - - - STOP - - - - - - - - - - - - - - - - - - - - - - - - - -
elif [ "$1" = "$STOP" ]; then
	if [ -n "$2" ]; then
		if [ "$2" = "all" ]; then
			SERV="$ALL"
		else
			SERV="${*:2}"
		fi
		for element in $SERV
		do
			if [ `mc isopen $element` -eq "1" ]; then
				if [[ $element == bungee* ]]; then
					serv_vafermerb+=" $element"
				else
					serv_vafermer+=" $element"
				fi
			else
				serv_fermer+=" $element"
			fi
		done
	if [ -n "$serv_vafermerb" ]; then
		for element in $serv_vafermerb
		do
			screen -S $element -X stuff 'end\r'
		done
		echo -e "\e[36m$serv_vafermerb\e[0;36m s'est arrêté (BUNGEE)\e[0m"
		
	fi
	if [ -n "$serv_vafermer" ]; then
		for element in $serv_vafermer
		do
			screen -S $element -X stuff 'stop\r'
		done
		echo -e "\e[36m$serv_vafermer\e[0;36m s'est arrêté \e[0m"
	fi
	if [ -n "$serv_fermer" ]; then
		echo -e "\e[31m$serv_fermer\e[0;31m n'est pas ouvert\e[0m"
	fi
	
	else
		read -p 'Quel(s) serveur(s) ? ' server_select
		$0 $STOP $server_select
	fi
#- - - - - - - - - - - - - - - - - - - - - - - - - - - BACKUP - - - - - - - - - - - - - - - - - - - - - - - - - -
elif [ "$1" = "backupserv" ]; then
	echo -e "\e[32mCréation de la backup des serveurs...\e[0m"
	tar -c $SERVEUR_DIR | pv -s $(du -sb $SERVEUR_DIR | awk '{print $1}') > "$BACKUP_DIR/$DATE_DAY | serveurs.tar"
#- - - - - - - - - - - - - - - - - - - - - - - - - - - BACKUP - - - - - - - - - - - - - - - - - - - - - - - - - -
elif [ "$1" = "backupbdd" ]; then
	echo -e "\e[32mCréation de la backup bdd ...\e[0m"
	SIZE_BYTES=$(mysql --skip-column-names -h $BDD_HOST -u $BDD_USER -p$BDD_PASSWORD <<< 'SELECT SUM(data_length) AS "size_bytes" FROM information_schema.TABLES;')
	mysqldump -h $BDD_HOST -u $BDD_USER -p$BDD_PASSWORD -A -x | pv --progress --size $SIZE_BYTES > "$BACKUP_DIR/$DATE_DAY | databases.sql"
#- - - - - - - - - - - - - - - - - - - - - - - - - - - BACKUP - - - - - - - - - - - - - - - - - - - - - - - - - -
elif [ "$1" = "$BACKUP" ]; then
	find "$BACKUP_DIR/" -type f -mtime +0 -exec rm {} \;
	# find "/home/.backup/" -type f -mtime +1 -exec rm {} \;
	echo -e "\e[94mSuppression des backups de + de 2 jours effectué."
	for element in `ls $SERVEUR_DIR`
	do
		find "$SERVEUR_DIR/$element/logs/" -type f -mtime +1 -exec rm {} \;
		if [ `mc isopen $element` -eq "1" ]; then
			serv_allumer+=" $element"
		fi
	done
	echo -e "\e[94mSuppression des logs des serveurs minecraft de + de 2 jours effectué.\e[0m"

	if [ "$serv_allumer" != "" ]; then
		echo -e "\e[93mLes serveurs$serv_allumer sont encore ouvert, les joueurs ont reçu un message leur annonçant la fermeture dans 15 mins.\e[0m"
		for element in $serv_allumer
		do
			if [[ $element == bungee* ]]; then
				backupb+=" $element"
			else
				backupm+=" $element"
			fi
		done
		for element in $backupm
		do
			screen -S $element -p 0 -X stuff "tellraw @a [\"\",{\"text\":\"[\",\"color\":\"dark_red\"},{\"text\":\"INFO\",\"color\":\"gold\"},{\"text\":\"] \",\"color\":\"dark_red\"},{\"text\":\"Redémarrage des serveurs dans 15 minutes.\",\"bold\":true,\"color\":\"red\"}]^M"
		done
		echo -e "\e[93mFermeture dans 15 mins. Le redémarrage prendra environ 20 mins.\e[0m"
		sleep 300
		
		for element in $backupm
		do
			screen -S $element -p 0 -X stuff "tellraw @a [\"\",{\"text\":\"[\",\"color\":\"dark_red\"},{\"text\":\"INFO\",\"color\":\"gold\"},{\"text\":\"] \",\"color\":\"dark_red\"},{\"text\":\"Redémarrage des serveurs dans 10 minutes.\",\"bold\":true,\"color\":\"red\"}]^M"
		done
		echo -e "\e[93mFermeture dans 10 mins. Le redémarrage prendra environ 20 mins.\e[0m"
		sleep 300
		
		for element in $backupm
		do
			screen -S $element -p 0 -X stuff "tellraw @a [\"\",{\"text\":\"[\",\"color\":\"dark_red\"},{\"text\":\"INFO\",\"color\":\"gold\"},{\"text\":\"] \",\"color\":\"dark_red\"},{\"text\":\"Redémarrage des serveurs dans 5 minutes.\",\"bold\":true,\"color\":\"red\"}]^M"
		done
		echo -e "\e[93mFermeture dans 5 mins. Le redémarrage prendra environ 20 mins.\e[0m"
		sleep 180
		for element in $backupm
		do
			screen -S $element -p 0 -X stuff "tellraw @a [\"\",{\"text\":\"[\",\"color\":\"dark_red\"},{\"text\":\"INFO\",\"color\":\"gold\"},{\"text\":\"] \",\"color\":\"dark_red\"},{\"text\":\"Redémarrage des serveurs dans 2 minutes.\",\"bold\":true,\"color\":\"red\"}]^M"
		done
		echo -e "\e[93mFermeture dans 2 mins. Le redémarrage prendra environ 20 mins.\e[0m"
		sleep 60
		for element in $backupm
		do
			screen -S $element -p 0 -X stuff "tellraw @a [\"\",{\"text\":\"[\",\"color\":\"dark_red\"},{\"text\":\"INFO\",\"color\":\"gold\"},{\"text\":\"] \",\"color\":\"dark_red\"},{\"text\":\"Redémarrage des serveurs dans 1 minutes.\",\"bold\":true,\"color\":\"red\"}]^M"
		done
		echo -e "\e[93mFermeture dans 1 min. Le redémarrage prendra environ 20 mins.\e[0m"
		sleep 55
		for element in $backupm
		do
			screen -S $element -p 0 -X stuff "tellraw @a [\"\",{\"text\":\"[\",\"color\":\"dark_red\"},{\"text\":\"INFO\",\"color\":\"gold\"},{\"text\":\"] \",\"color\":\"dark_red\"},{\"text\":\"Redémarrage des serveurs dans 5 secondes.\",\"bold\":true,\"color\":\"red\"}]^M"
		done
		sleep 5
		for element in $backupm
		do
			screen -S $element -X stuff 'kick @a §6§lRedémarrage des serveurs en cours\r'
		done
		echo -e "\e[93mTous les joueurs ont été kick.\e[0m"
		sleep 5
		$0 $STOP $serv_allumer
		
		serv_allumer2="open"
		i=0
		while [ "$serv_allumer2" != "" ] && [ "$i" -lt "60" ]
		do
			sleep 1
			serv_allumer2=""
			for element in $serv_allumer
			do
				if [ `mc isopen $element` -eq "1" ]; then
					serv_allumer2+=" $element"
				fi
			done
			let "i = i + 1"
			if [ "$serv_allumer2" != "" ]; then
				if ! (( $i % 10 )) ; then
					$0 $STOP $serv_allumer2
					echo -e "\e[91mTentative de fermeture de \e[36m$serv_allumer2\e[91m, attente $((i * 5)) secondes (max 60 secondes).\e[0m"
				else
					echo -e "\e[91mLes serveurs\e[36m$serv_allumer2\e[91m ne sont pas encore fermé, attente $((i * 5)) secondes (max 60 secondes).\e[0m"
				fi
			fi
		done
		for element in `ls $SERVEUR_DIR`
		do
			if [ `mc isopen $element` -eq "1" ]; then
				screen -X -S $element kill
				echo -e "\e[91m$element a été fermer de force.\e[0m"
			fi
		done
	fi
	$0 backupserv
	$0 backupbdd

	echo -e "\e[92mRécupération de la dernière MAJ de Paperspigot...\e[0m"
	old_build_id=`cat paperspigot_build_id.txt`
	build_id=`wget -qO- $PAPER_API_VERSION | jq -r '.build'`
	if [ -z $old_build_id ] || [ "$build_id" -gt $old_build_id ]; then
		echo -e "\e[92mMise à jour des PaperSpigot...\e[0m"
		rm $spigot_file
		wget -O $spigot_file $PAPER_API_DOWNLOAD
		echo $build_id > paperspigot_build_id.txt
		for element in `ls $SERVEUR_DIR`
		do
			if [[ $element != bungee* ]]; then
				rm $SERVEUR_DIR/$element/$spigot_file
				cp $spigot_file $SERVEUR_DIR/$element
			fi
		done
	else
		echo -e "\e[92mMAJ Paperspigot pas nécessaire\e[0m"
	fi
	echo -e "\e[92mRécupération de la dernière MAJ de WaterFall...\e[0m"
	old_build_id=`cat bungee_build_id.txt`
	build_id=`wget -qO- $WATERFALL_API_VERSION | jq -r '.build'`
	if [ -z $old_build_id ] || [ "$build_id" -gt $old_build_id ]; then
		echo -e "\e[92mMise à jour du WaterFall...\e[0m"
		rm $bungee_file
		wget -O $bungee_file $WATERFALL_API_DOWNLOAD
		echo $build_id > bungee_build_id.txt
		for element in `ls $SERVEUR_DIR`
		do
			if [[ $element == bungee* ]]; then
				rm $SERVEUR_DIR/$element/$bungee_file
				cp $bungee_file $SERVEUR_DIR/$element
			fi
		done
	else
		echo -e "\e[92mMAJ bungee pas nécessaire\e[0m"
	fi
	echo -e "\e[92mRéouverture de tous les serveurs...\e[0m"
	$0 $START all
	echo -e "\e[32mTous est parfait, les serveurs se lancent !\e[0m"
#- - - - - - - - - - - - - - - - - - - - - - - - - - - RESTART - - - - - - - - - - - - - - - - - - - - - - - - - -
elif [ "$1" = "$RESTART" ]; then
	if [ -n "$2" ]; then
		if [ "$2" = "all" ]; then
			SERV="$ALL"
		else
			SERV="${*:2}"
		fi
		for element in $SERV
		do
			if [ `mc isopen $element` -eq "1" ]; then
				serv_vafermer+=" $element"
			else
				serv_fermer+=" $element"
			fi
		done
		if [ -n "$serv_fermer" ]; then
			echo -e "\e[31m$serv_fermer\e[0;31m n'est pas ouvert\e[0m"
		fi
		if [ -n "$serv_vafermer" ]; then
			echo -e "\e[36m$serv_vafermer\e[0;36m va redémarrer\e[0m"
			$0 $STOP $serv_vafermer
			# ----
			for element in $serv_vafermer
			do
				if [ `mc isopen $element` -eq "1" ]; then
					serv_allumer+=" $element"
				fi
			done
			serv_allumer2="open"
			i=0
			while [ "$serv_allumer2" != "" ] && [ "$i" -lt "60" ]
			do
				sleep 5
				serv_allumer2=""
				for element in $serv_allumer
				do
					if [ `mc isopen $element` -eq "1" ]; then
						serv_allumer2+=" $element"
					fi
				done
				let "i = i + 1"
				if [ "$serv_allumer2" != "" ]; then
					if ! (( $i % 10 )); then
						echo -e "\e[91mLes serveurs\e[36m$serv_allumer2\e[91m ne sont pas encore fermé, attente $((i * 5)) secondes (max 60 secondes)\e[0m"
					else
						$0 $STOP $serv_allumer2
						echo -e "\e[91mTentative de fermeture de \e[36m$serv_allumer2\e[91m, attente $((i * 5)) secondes (max 60 secondes)\e[0m"
					fi
				fi
			done
			for element in $serv_vafermer
			do
				if [ `mc isopen $element` -eq "1" ]; then
					screen -X -S $element kill
					echo -e "\e[91m$element a été fermer de force.\e[0m"
				fi
			done
			$0 $START $serv_vafermer
		fi
	else
		read -p 'Quel(s) serveur(s) ? ' server_select
		$0 $RESTART $server_select
	fi
#- - - - - - - - - - - - - - - - - - - - - - - - - - - MDP - - - - - - - - - - - - - - - - - - - - - - - - - -
elif [ "$1" = "mdp" ]; then
	length=${2:-50}
	tr -dc A-Za-z0-9_ < /dev/urandom | head -c ${length} | xargs
#- - - - - - - - - - - - - - - - - - - - - - - - - - - COPY - - - - - - - - - - - - - - - - - - - - - - - - - -
elif [ "$1" = "copy" ]; then
	if [ -n $2 ]; then
		for element in `ls $SERVEUR_DIR`
		do
			if [ $2 != $element ]; then
				cp $SERVEUR_DIR/$2/plugins/OlympaCore.jar $SERVEUR_DIR/$element/plugins/OlympaCore.jar
				mv $SERVEUR_DIR/$element/plugins/OlympaCore.jar.temp $SERVEUR_DIR/$element/plugins/OlympaCore.jar
			fi
		done
		echo -e "\e[32mOlympaCore est désormais MAJ sur tous les serveurs !\e[0m"
	fi
#- - - - - - - - - - - - - - - - - - - - - - - - - - - LINK - - - - - - - - - - - - - - - - - - - - - - - - - -
elif [ "$1" = "link" ]; then

	USAGElink="/$0 link <server> <mode>"
	
	if [ -d "/home/serveurs/.other/link/$3" ]; then
		mode="$3"
		read -p "Etes vous de vouloir link le serveur $2 en mode $mode ? (y/n)" yesorno
		if [ $yesorno == 'y' ]; then
			cp -lr $SERVEUR_DIR/.other/link/$mode/* $SERVEUR_DIR/$2/
			cp -lr $SERVEUR_DIR/.other/link/common/* $SERVEUR_DIR/$2/
			echo -e "\e[32mLe serveur a été link\e[0m"
		else
			echo -e "\e[32mLe serveur n'a pas été link\e[0m"
	
		fi
	else
		echo $USAGElink
	fi

#- - - - - - - - - - - - - - - - - - - - - - - - - - - SEE - - - - - - - - - - - - - - - - - - - - - - - - - -
elif [ "$1" = "$SEE" ]; then
	if [ -n "$2" ]; then
		if [ -n "$3" ] && [ "-t" == "$3" ]; then
			i=1;
			while [ "$i" -lt "100000" ]
			do
				echo -e "\e[91mTentative $i de regarder la console sur le serveur $2. CTRL + C pour quitter.\e[0m"
				screen -x $2
				sleep 1
				let "i = i + 1"
			done
		else
			screen -x $2
		fi
	fi
#- - - - - - - - - - - - - - - - - - - - - - - - - - - deploy - - - - - - - - - - - - - - - - - - - - - - - - - -
elif [ "$1" = "deploy" ]; then
	if [ -n "$2" ]; then
		PLUGIN="$2"
	fi
	if [ -n "$3" ]; then
		BRANCH="$3"
		SERVS=${@:4}
	else
		BRANCH="master"
		SERVS=${@:3}
	fi
	if [[ `cd $SERVEUR_DIR` == *"$BRANCH"* ]]; then
		echo -e "\e[91m$BRANCH doit être une branch valide tel que master ou dev.\e[0m"
		exit 0;
	fi
	if [ -n "$PLUGIN" ]; then
		if [ "$PLUGIN" = "buildtools" ]; then
			cd $REPO_DIR/$PLUGIN/ && bash start.sh
			echo -e "\e[32mLe jar de dernière version de Spigot a été crée.\e[0m"
			exit 0
		elif [ "$PLUGIN" = "scripts" ]; then
			cd $REPO_DIR/olympa-$PLUGIN/ && bash deploy.sh
			echo -e "\e[32mMise à jours des scripts de la machine effectué.\e[0m"
			exit 0
		elif [ "$PLUGIN" = "ALL" ]; then
			for element in `ls $REPO_DIR`
			do
				$0 deploy $element $BRANCH $SERVS
			done
			exit 0
		elif [ -n "$4" ]; then
			SERVS="${@:4}"
		elif [ "$(cat $REPO_DIR/olympa-$PLUGIN/for-server)" = "ALL" ]; then
			SERVS=`ls $SERVEUR_DIR`
		elif [[ $PLUGIN == olympa* ]]; then
			SERVS=`cat $REPO_DIR/$PLUGIN/for-server`
		else
			SERVS=`cat $REPO_DIR/olympa-$PLUGIN/for-server`
		fi
		for element2 in $SERVS
		do
			if [ `$0 isopen $element2` -eq "1" ]; then
				echo -e "\e[32mLe serveur $element2 est ouvert, il va devoir redémarrer\e[0m"
			else
				echo -e "\e[91mLe serveur $element2 est fermé\e[0m"
			fi
		done
		# chmod 755 $REPO_DIR/*$PLUGIN/deploy.sh
		# //cd $REPO_DIR/*$PLUGIN/
		# bash deploy.sh ${@:3}
		bash /home/repo/deploy.sh ${@:2}
		#if [ "$?" -ne 0 ]; then
		#	echo -e "\e[91mLe build de $PLUGIN a échoué !\e[0m"; exit 1
		#else
		#	echo -e "\e[32mLe jar du $PLUGIN a été crée.\e[0m"
		#	echo -e "\e[32mIl faut maintenant copier le jar sur le serveur.\e[0m"
		#	echo "$0 deployto $PLUGIN $BRANCH $SERVS"
		#fi
	else
		for element in `ls $REPO_DIR`
		do
			if [ -f "$REPO_DIR/$element/deploy.sh" ]; then
				repos+=" $element"
			fi
		done
		echo -e "\e[91mLe premier argument doit être dans la liste suivante\n${repos//olympa}\nou ALL\e[0m"
	fi
#- - - - - - - - - - - - - - - - - - - - - - - - - - - auto deploy - - - - - - - - - - - - - - - - - - - - - - - - - -
elif [ "$1" = "deployauto" ] || [ "$1" = "autodeploy" ]; then
	PLUGIN="$2"
	if [ -n "$3" ]; then
		BRANCH="$3"
		SERVS=${@:4}
	else
		BRANCH="master"
		SERVS=${@:3}
	fi
	if [ -n "$2" ]; then
		if [ -n "$3" ] && [[ $3 == "refs/heads/"* ]]; then
			BRANCH="${BRANCH#"refs/heads/"}"
		fi
		$0 deploy $PLUGIN $BRANCH $SERVS && $0 deployto $PLUGIN $BRANCH $SERVS
	else
		echo -e "\e[91mLe 1er argument doit être dans :\n${repos//olympa}\nou ALL\nLe 2ème une branch :\ndev\master\nou autre branch qui existe\net les autres (faculatif) doivent être un un serveur dans :\n$(ls $SERVEUR_DIR)\n\e[0m"
	fi
#- - - - - - - - - - - - - - - - - - - - - - - - - - - deployTo - - - - - - - - - - - - - - - - - - - - - - - - - -
elif [ "$1" = "deployto" ]; then
	PLUGIN="$2"
	if [ -n "$3" ]; then
		BRANCH="$3"
		SERVS=${@:4}
	else
		BRANCH="master"
		SERVS=${@:3}
	fi
	if [[ `cd $SERVEUR_DIR` == *"$BRANCH"* ]]; then
		echo -e "\e[91m$BRANCH doit être une branch valide tel que master ou dev.\e[0m"
		exit 1;
	fi
	if [ -n "$PLUGIN" ]; then
		if [ "$PLUGIN" = "buildtools" ]; then
			echo -e "\e[91mImpossible de deployTo les paperclip & bungee. C'est gérer automatiquement à chaque $0 backup.\e[0m"
			exit 0
		elif [ "$PLUGIN" = "scripts" ]; then
			echo -e "\e[0;36mInutile de deployTo les scripts.\e[0m"
			exit 0

		elif [ "$PLUGIN" = "manager" ]; then
			echo -e "\e[0;36mInutile de deployTo le bot. Restart effectué.\e[0m"
			exit 0
		elif [ -n "$SERVS" ]; then
			if [ "$SERVS" = "ALL" ]; then
				SERVS="$(ls $SERVEUR_DIR)"
			fi
		else
			if [ -f "$REPO_DIR/olympa-$PLUGIN/for-server" ]; then
				SERVS="$(cat $REPO_DIR/olympa-$PLUGIN/for-server)"
				if [ "$SERVS" = "ALL" ]; then
					SERVS="$(ls $SERVEUR_DIR)"
				fi
			else
				echo -e "\e[91m$REPO_DIR/olympa-$PLUGIN/for-server n'existe pas, impossible de detecter sur quel(s) serveurs deploy le olympa$PLUGIN.\e[0m"
				exit 1
			fi
		fi
		for element in $SERVS
		do
			if [[ $element == bungee* ]]; then
				COMMAND="alertraw"
			else
				COMMAND="tellraw @a"
			fi
			if [ `$0 isopen $element` -eq "1" ]; then
				will_w8+=" $element"
				screen -S $element -p 0 -X stuff "$COMMAND [{\"text\":\"[\",\"color\":\"dark_red\"},{\"text\":\"INFO\",\"color\":\"gold\"},{\"text\":\"] \",\"color\":\"dark_red\"},{\"text\":\"Le serveur $element va redémarrer dans $DEPLOYTO_SECOND_BEFORE_SHUTDOWN secondes afin de faire une mise à jour du Olympa$PLUGIN...\",\"color\":\"red\"}]^M"
				echo -e "\e[32mLe serveur $element est ouvert, les joueurs ont été informés du redémarrage qui arrive dans $DEPLOYTO_SECOND_BEFORE_SHUTDOWN secondes.\e[0m"
			else
				echo -e "\e[91mLe serveur $element est fermé.\e[0m"
			fi
		done
		if [ ! -z "$will_w8" ]; then
			sleep $DEPLOYTO_SECOND_BEFORE_SHUTDOWN
			$0 $STOP $will_w8
		fi
		for element in $SERVS
		do
			if [ `mc isopen $element` -eq "1" ]; then
				serv_allumer+=" $element"
			fi
		done
		serv_allumer2="open"
		i=0
		while [ "$serv_allumer2" != "" ] && [ "$i" -lt "60" ]
		do
			sleep 5
			serv_allumer2=""
			for element in $serv_allumer
			do
				if [ `mc isopen $element` -eq "1" ]; then
					serv_allumer2+=" $element"
				fi
			done
			let "i = i + 1"
			if [ "$serv_allumer2" != "" ]; then
				if ! (( $i % 10 )) ; then
					$0 $STOP $serv_allumer2
					echo -e "\e[91mTentative de fermeture de \e[36m$serv_allumer2\e[91m, attente $((i * 5)) secondes (max 60 secondes).\e[0m"
				else
					echo -e "\e[91mLes serveurs\e[36m$serv_allumer2\e[91m ne sont pas encore fermé, attente $((i * 5)) secondes (max 60 secondes).\e[0m"
				fi
			fi
		done
		for element in $SERVS
		do
			if [ `mc isopen $element` -eq "1" ]; then
				screen -X -S $element kill
				echo -e "\e[91m$element a été fermer de force.\e[0m"
			fi
		done
		for element in $SERVS
		do
			if [ -f "$REPO_DIR/olympa-$PLUGIN/pom.xml" ]; then
				cp $REPO_DIR/olympa-$PLUGIN/target/Olympa*.jar $SERVEUR_DIR/$element/plugins/
			else
				cp $REPO_DIR/olympa-$PLUGIN/build/Olympa*.jar $SERVEUR_DIR/$element/plugins/
			fi
			if [ "$?" -ne 0 ]; then
				echo -e "\e[91mLa copy du $PLUGIN a échoué !\e[0m"; exit 1
				for element2 in $serv_allumer
				do
					if [[ $element2 == bungee* ]]; then
						COMMAND="alertraw"
					else
						COMMAND="tellraw @a"
					fi
					if [ `$0 isopen $element2` -eq "1" ]; then
						screen -S $element2 -p 0 -X stuff "$COMMAND [{\"text\":\"[\",\"color\":\"dark_red\"},{\"text\":\"INFO\",\"color\":\"gold\"},{\"text\":\"] \",\"color\":\"dark_red\"},{\"text\":\"La mise à jour de Olympa$PLUGIN sur le serveur $selement a échoué. Le serveur ne va pas redémarrer.\",\"color\":\"red\"}]^M"
						echo -e "\e[91mLe serveur $element2 est ouvert, les joueurs ont été informés de l'échec.\e[0m"
					else
						echo -e "\e[91mLe serveur $element2 est fermé, impossible de les informés de l'échec.\e[0m"
					fi
				done
			else
				echo -e "\e[36molympa$PLUGIN\e[0;36m a été deploy sur \e[36m$element\e[0m"
			fi
		done
		if [ "$serv_allumer" != "" ]; then
			$0 $START $serv_allumer
		fi
	else
		for element in `ls $REPO_DIR`
		do
			if [ -f "$REPO_DIR/$element/deploy.sh" ]; then
				repos+=" $element"
			fi
		done
		echo -e "\e[91mLe premier argument doit être dans :\n${repos//olympa}\nou ALL et le deuxième (faculatif) peux être un serveur dans :\n$(ls $SERVEUR_DIR)\e[0m"
	fi
#- - - - - - - - - - - - - - - - - - - - - - - - - - - deployServ - - - - - - - - - - - - - - - - - - - - - - - - - -
elif [ "$1" = "deployserv" ]; then
	if [ -n "$2" ]; then
		if [ "$2" = "all" ]; then
			SERV="$ALL"
		else
			SERV="${*:2}"
		fi
		for element in $SERV
		do
		if [ -d "$SERVEUR_DIR/$element" ];then
			SERV_TO_UP+=" $element"
		else
			serv_dossier+=" $element"
		fi
		done
		if [ -n "$serv_dossier" ]; then
			echo -e "\e[31m$serv_dossier\e[0;31m n'existe pas (dossier $SERVEUR_DIR/nom du serveur)\e[0m"
		fi
		if [ -n "$SERV_TO_UP" ]; then
			for element in $SERV_TO_UP
			do
				bash -c "cd $SERVEUR_DIR/$element; sh $STARTSH"
			done
			echo -e "\e[32m$SERV_TO_UP\e[0;32m a démarré\e[0m"
		fi
	else
		read -p 'Quel(s) serveur(s) ? ' server_select
		$0 $START $server_select
	fi
#- - - - - - - - - - - - - - - - - - - - - - - - - - - TS - - - - - - - - - - - - - - - - - - - - - - - - - -
elif [ "$1" = "ts" ]; then
	telnet 172.0.0.1 10011
	#- - - - - - - - - - - - - - - - - - - - - - - - - - - REDIS - - - - - - - - - - - - - - - - - - - - - - - - - -
elif [ "$1" = "redis" ]; then
	redis-cli -a 1rWS1Fmj7s4snEDCQgw3Mcznf8ShfrLZpPkKtstu5coV9PpDI1
#- - - - - - - - - - - - - - - - - - - - - - - - - - USAGE - - - - - - - - - - - - - - - - - - - - - - - - - -
else
	echo -e "\e[31m'${*:0}' Unknow\n$USAGE\e[0m"
fi
